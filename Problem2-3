
class Student:
    def __init__(self, name: str, major: str, id: str):
        self.name = name
        self.major = major
        self.id = id

class FullTimeStudent(Student):
    def __init__(self, name: str, major: str, id: str, joinedP: str, researchP: str):
        super().__init__(name, major, id)
        self.joinedP= joinedP
        self.researchP = researchP

class PartTimeStudent(Student):
    count = 0  
    def __init__(self, name: str, major: str, id: str, min_hour: int, max_hour: int):
        super().__init__(name, major, id)
        self.min_hour = min_hour
        self.max_hour = max_hour
        PartTimeStudent.count += 1  
    def get_count():
        return PartTimeStudent.count  

student1 = PartTimeStudent("Cuong", "Computer Science", "GCS001", 10, 20)
student2 = PartTimeStudent("Nhu", "Data Management", "GCS002", 5, 15)

print(f"Total PartTimeStudents: {PartTimeStudent.get_count()}")


class Lecturer:
    def __init__(self, lecturer_id: str, name: str, rank: str, projectLed: str, researchP: str):
        self.lecturer_id = lecturer_id
        self.name = name
        self.rank = rank
        self.projectLed = projectLed
        self.researchP = researchP


class Project:
    def __init__(self, name: str, budget: float, leader: Lecturer, members: list):
        self.name = name
        self.budget = budget
        self.leader = leader
        self.members = members

class SchoolSystem:
    def __init__(self):
        self.students = [] 
        self.lecturers = []  
        self.projects = []  

    def add_student(self, student: Student):
        if len(self.students) < 10:
            self.students.append(student)
            return True
        return False 

    def add_lecturer(self, lecturer: Lecturer):
        if len(self.lecturers) < 10:
            self.lecturers.append(lecturer)
            return True
        return False 

    def add_project(self, project: Project):
        if len(self.projects) < 10:
            self.projects.append(project)
            return True
        return False 

    def display_students(self):
        print("Students List:")
        for student in self.students:
            print(student.name)

    def display_lecturers(self):
        print("Lecturers List:")
        for lecturer in self.lecturers:
            print(lecturer.name)

    def display_projects(self):
        print("Projects List:")
        for project in self.projects:
            print(project.name)

school = SchoolSystem()

lecturer1 = Lecturer("L001", "Mr. Bao", "Professor", "AI Research", "Machine Learning")
lecturer2 = Lecturer("L002", "Mr. Van", "Security Professor", "Data Science", "Deep Learning")
lecturer3 = Lecturer("L003", "Dr. Williams", "Assistant Professor", "Cybersecurity", "Network Security")
lecturer4 = Lecturer("L004", "Dr. Brown", "Professor", "Robotics", "AI in Robotics")
lecturer5 = Lecturer("L005", "Dr. Taylor", "Professor", "Blockchain", "Cryptography")
project1 = Project("AI Research", 5000, lecturer1, [])
project2 = Project("Deep Learning", 7000, lecturer2, [])
project3 = Project("Cybersecurity", 6000, lecturer3, [])
project4 = Project("Robotics AI", 8000, lecturer4, [])
project5 = Project("Blockchain Security", 6500, lecturer5, [])

school.add_lecturer(lecturer1)
school.add_lecturer(lecturer2)
school.add_lecturer(lecturer3)
school.add_lecturer(lecturer4)
school.add_lecturer(lecturer5)
school.add_project(project1)
school.add_project(project2)
school.add_project(project3)
school.add_project(project4)
school.add_project(project5)

student1 = FullTimeStudent("Cuong", "Computer Science", "GCS0001", project1.name, "AI Enthusiast")
student2 = PartTimeStudent("Nhu", "Data Management", "GCS0002", 5, 15)
student3 = FullTimeStudent("Qui", "Math", "GCS0003", project2.name, "Quantum Mechanics")
student4 = PartTimeStudent("Bao", "Engineering", "GCS0004", 10, 20)
student5 = FullTimeStudent("Toan", "Cybersecurity", "GCS0005", project3.name, "Ethical Hacking")
student6 = PartTimeStudent("Quan", "Robotics", "P0006", 8, 18)
student7 = FullTimeStudent("Vinh", "Data Science", "F0007", project2.name, "Big Data Analysis")
student8 = PartTimeStudent("Hank", "Physics", "P0008", 12, 22)
student9 = FullTimeStudent("Ivy", "Computer Science", "F0009", project4.name, "AI in Robotics")
student10 = PartTimeStudent("Jack", "Mathematics", "P0010", 6, 14)
student11 = FullTimeStudent("Kevin", "Blockchain", "F0011", project5.name, "Decentralized Systems")
student12 = PartTimeStudent("Linda", "Cryptography", "P0012", 7, 16)
student13 = FullTimeStudent("Michael", "AI Ethics", "F0013", project1.name, "AI Policy")
student14 = PartTimeStudent("Nancy", "Software Engineering", "P0014", 9, 19)
student15 = FullTimeStudent("Oscar", "Robotics", "F0015", project4.name, "Autonomous Vehicles")

school.add_student(student1)
school.add_student(student2)
school.add_student(student3)
school.add_student(student4)
school.add_student(student5)
school.add_student(student6)
school.add_student(student7)
school.add_student(student8)
school.add_student(student9)
school.add_student(student10)
school.add_student(student11)
school.add_student(student12)
school.add_student(student13)
school.add_student(student14)
school.add_student(student15)

school.display_students()
school.display_lecturers()
school.display_projects()















